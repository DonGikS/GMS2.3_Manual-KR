<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "10.0_6";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Guide To Using Buffers</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page that explains how buffers work"/>
  <meta name="rh-index-keywords" content="Guide To Using Buffers"/>
  <meta name="search-keywords" content="Using Buffers,buffers"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Guide To Using Buffers">
        <span>버퍼 사용 안내서</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>이 페이지를 전체 내용으로 보려면 여기를 클릭하십시오</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>버퍼 사용 안내서</h1>
  <p>버퍼 (프로그래밍 중)는 기본적으로 시스템 메모리 내의 공간으로, 데이터 전송, 충돌, 색상 데이터 등 거의 모든 것에 대한 작은 데이터 패킷을 저장하는 데 사용됩니다. 시스템 메모리에 저장되어 있기 때문에 액세스 속도가 매우 빠르며 버퍼는 일반적으로 처리하기 전에 네트워크 정보를 수신하거나 게임에 체크 포인트를 저장하는 등 매우 단기 저장에 사용됩니다 (이 내용은 페이지 아래에 주어진 예).</p>
  <p>버퍼는 시스템 메모리에 공간을 할당하고 <a class="tooltip" title="바이트는 8 진 이진수 길이의 데이터 단위이며, 바이트를 구성하는 각 숫자를 비트라고합니다. 즉, 바이트는 8 비트이며 비트는 1 또는 0 일 수 있습니다.">바이트 단위로</a> 계산하여 생성되며, 게임이 실행되는 동안 또는 적절한 기능을 사용하여 버퍼를 삭제할 때까지 게임용으로 예약됩니다 (모든 GML 버퍼 기능을 찾을 수 있음) <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">여기</a> ). 즉, 게임에 초점이 맞지 않더라도 (예를 들어 전화를 걸 때 모바일 장치에서 게임이 백그라운드에 놓임) 버퍼가 여전히 존재하지만 게임을 닫거나 다시 시작하면 버퍼가 손실됩니다.</p>
  <p class="note"><strong>참고</strong> : 게임을 다시 시작해도 버퍼가 지워지거나 삭제되지 않습니다! 그러나 ID 핸들이 손실되어 이전에 생성 된 버퍼에 더 이상 액세스하지 못하게되어 메모리 누수가 발생하여 결국 게임이 중단 될 수 있습니다. 따라서 게임을 다시 시작할 때는 버퍼를 먼저 삭제해야합니다.</p>
  <p>GameMaker Studio 2에서는 네 가지 버퍼 유형을 만들 수 있습니다. 버퍼는 최적화 된 임시 저장 매체로 설계되었으므로 저장하려는 데이터 유형에 적합한 버퍼를 작성해야합니다. 그렇지 않으면 오류가 발생하거나 병목 현상이 발생할 수 있습니다 귀하의 코드에서. 이를 자세히 설명하기 전에 사용 가능한 4 가지 버퍼 유형 (GML에서 <strong>상수</strong> 로 정의 됨)을 살펴 보겠습니다.</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>일정한</th>
        <th>기술</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_fixed</span></td>
        <td>바이트 단위의 고정 된 크기의 버퍼 버퍼가 생성 될 때 크기가 설정되며 다시 변경할 수 없습니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_grow</span></td>
        <td>데이터가 추가되면 동적으로 <i>커지는</i> 버퍼입니다. 초기 크기 (저장 될 것으로 예상되는 데이터 크기의 근사치)로 생성 한 다음이 초기 크기를 초과하는 추가 데이터를 수용하도록 확장됩니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_wrap</span></td>
        <td>데이터가 <i>랩핑</i> 되는 버퍼입니다. 추가되는 데이터가 버퍼 크기의 한계에 도달하면 덮어 쓰기가 버퍼의 시작 부분에 다시 배치되고 이후부터 계속해서 쓰기가 계속됩니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_fast</span></td>
        <td>이것은 읽기 / 쓰기 속도가 매우 빠른 특수 &quot;스트립 다운&quot;버퍼입니다. 그러나 <span class="inline"><tt>buffer_u8</tt></span> 데이터 유형에만 사용할 수 있으며 1 바이트로 정렬되어야합니다. ( <b>데이터 유형</b> 및 <b>바이트 정렬</b> 에 대한 정보는이 페이지에서 더 찾을 수 있습니다).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>GameMaker Studio 2를 사용할 때 사용할 수있는 버퍼 유형이며, 사용하려는 버퍼 유형에 따라 크게 다릅니다. 예를 들어, 증가 버퍼는 데이터의 &quot;스냅 샷&quot;을 저장하여 저장 게임을 만들 때 사용됩니다. 실제 데이터의 양을 알지 못하기 때문에 빠른 버퍼가 사용되기 때문입니다. 예를 들어 이미지에서 <a class="tooltip" title="이것은 Alpha, Red, Green, Blue의 약어이며 16 진수 값으로 지정된 색상 구성 요소를 나타내는 데 사용됩니다 (예 : # FF53E270). 여기서 두 자리 숫자 각각은 단일 구성 요소를 나타냅니다. 위의 ARGB 예제를 분류하면 Alpha (FF), Red (53), Green (E2) 및 Blue (70)의 구성 요소 값이 제공됩니다.">ARGB</a> 데이터를 처리 할 때 작업중인 값이 모두 0과 255 또는 -128과 127 사이임을 알아야합니다.</p>
  <p>버퍼를 생성 할 때는 항상 유형에 적합한 크기로 버퍼를 생성해야합니다. 일반적으로 저장해야하는 최대 데이터 크기를 수용 할 수 있도록 버퍼를 생성해야합니다. 덮어 쓰기 오류를 방지하려면 증가 버퍼를 사용하십시오.</p>
  <p>버퍼를 만드는 실제 코드는 다음과 같습니다.</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p>그러면 16384 바이트의 고정 버퍼가 생성되고 2로 바이트 정렬되어 함수는 나중에이 버퍼를 참조하기 위해 변수에 저장된 고유 ID 값을 반환합니다.</p>
  <p>버퍼에 데이터를 읽고 쓸 때 &quot;데이터 유형&quot;에 의해 정의 된 데이터의 &quot;청크&quot;에서 수행합니다. &quot;데이터 유형&quot;은 기록되는 값에 대해 버퍼 내에 할당 된 바이트 수를 설정하며, 그렇지 않으면 코드에 대해 매우 이상한 결과 (또는 오류)가 발생합니다.</p>
  <p>버퍼는 <strong>순차적으로</strong> 데이터를 읽고 읽습니다. 즉, 한 데이터는 각 데이터 세트가 설정된 유형 <strong>으로 순차적으로</strong> 기록됩니다. 즉, 버퍼에 쓰는 데이터를 항상 이상적으로 알고 있어야합니다. 이러한 데이터 유형은 다음 상수로 GML에서 정의됩니다.</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>데이터 타입 상수</th>
        <th>바이트</th>
        <th>기술</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td>부호없는 8 비트 정수 0에서 255 사이의 양수 값입니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td>부호있는 8 비트 정수 -128에서 127 사이의 양수 또는 음수 값일 수 있습니다 (0은 양수로 분류 됨).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td>부호없는 16 비트 정수 이것은 0-65,535의 양수 값입니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td>부호있는 16 비트 정수 -32,768에서 32,767 사이의 양수 또는 음수 값일 수 있습니다 (0은 양수로 분류 됨).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td>16 비트 부동 소수점 숫자 +/- 65504 범위 내에서 양수 또는 음수 값이 될 수 있습니다. <b>(현재 지원되지 않음!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td>부호없는 32 비트 정수 0에서 4,294,967,295 사이의 양수 값입니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td>부호있는 32 비트 정수 -2,147,483,648에서 2,147,483,647까지 양수 또는 음수 값일 수 있습니다 (0은 양수로 분류 됨).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td>32 비트 부동 소수점 숫자 +/- 16777216 범위의 양수 또는 음수 값일 수 있습니다.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td>부호없는 64 비트 정수 값입니다. <b>(현재 모든 버퍼 기능에서 지원되는 것은 아닙니다!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td>64 비트 부동 소수점 숫자</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td>부울 값입니다. 1 또는 0 만 가능 ( <tt>true</tt> 또는 <tt>false</tt> )</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>해당 없음</td>
        <td>이것은 UTF-8 널 종료 (0x00) 문자열입니다. 기본적으로 GameMaker 문자열이 버퍼에 덤프되고 끝에 0이 추가됩니다.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>따라서 버퍼를 만들고 정보를 쓰고 싶다고 가정하면 다음 코드와 같은 것을 사용합니다.</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br/> buffer_write(buff, buffer_bool, global.Music);<br/> buffer_write(buff, buffer_s16, obj_Player.x);<br/> buffer_write(buff, buffer_s16, obj_Player.y);<br/> buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>위의 예를 보면 다른 유형의 데이터를 동시에 버퍼에 쓸 수 있음을 알 수 있습니다 ( <em>고속</em> 버퍼 유형을 사용할 때 특정 데이터 유형으로 만 제한됨).이 데이터는 버퍼에 추가됩니다 순차적으로 (버퍼에서 실제 위치는 아래에 설명 된 바이트 정렬에 따라 달라 지지만) 이것은 버퍼에서 정보를 읽는 경우에도 동일하며, 위에서 주어진 예제의 경우 데이터를 쓴 순서와 동일한 순서로 버퍼에서 데이터를 읽을 수 있습니다. 예를 들면 다음과 같습니다.</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br/> global.Music = buffer_read(buff, buffer_bool);<br/> obj_Player.x = buffer_read(buff, buffer_s16);<br/> obj_Player.y = buffer_read(buff, buffer_s16);<br/> global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>보시다시피, 버퍼에 정보를 읽는 것과 동일한 순서로 정보를 읽습니다. 버퍼에서 데이터를 추가 및 제거하는 방법에 대한 자세한 내용은 아래 예를 참조하십시오.</p>
  <p>이 페이지를 읽고 있다면 버퍼의 <strong>바이트 정렬</strong> 에 대한 참조를 보게 될 것입니다. 이것은 기본적으로 새로운 데이터가 주어진 버퍼 내에서 저장 될 위치를 말합니다. 어떻게 작동합니까? 단일 바이트 정렬 버퍼의 경우, 각 데이터 조각이 순차적으로 버퍼에 기록되고 각 새 데이터 조각이 이전 데이터 바로 뒤에 추가됩니다. 그러나 2 바이트 정렬 버퍼는 각 데이터 조각을 2 바이트 간격으로 기록하므로 초기 쓰기가 1 바이트 데이터 인 경우에도 다음 쓰기가 2 바이트로 정렬되도록 이동됩니다.</p>
  <p>따라서 바이트 정렬이 4 바이트로 설정되고 1 바이트 크기의 단일 데이터 조각을 쓴 다음 버퍼 <strong>텔</strong> (버퍼에 대한 현재 읽기 / 쓰기 위치를 가져옵니다)을 수행하십시오. 1 바이트의 <strong>오프셋</strong> 을 얻습니다 (이 경우 오프셋은 버퍼 시작에서 현재 읽기 / 쓰기 위치까지의 바이트 수입니다).</p>
  <p>그러나 1 바이트 크기의 다른 데이터를 쓴 <em>다음</em> 버퍼 텔 <em>을</em> 수행하면 정렬이 데이터를 채 웠기 때문에 2 바이트의 데이터 만 작성 했음에도 불구하고 5 바이트의 오프셋을 얻습니다. 4 바이트 버퍼 정렬과 정렬하십시오.</p>
  <p>기본적으로 이것이 의미하는 것은 정렬이 사물에 쓰여지는 <em>위치</em> 에만 영향을 미치기 때문에 버퍼에 무언가를 쓴 후에 말하면 이전에 쓴 데이터 바로 뒤에 오는 현재 쓰기 위치를 반환합니다. 그러나 다른 데이터를 쓰는 경우 내부적으로 버퍼는 실제로 데이터를 쓰기 전에 정렬 위치의 다음 배수로 쓰기 위치를 이동합니다.</p>
  <p>아래에는 프로젝트에서 버퍼를 사용하는 방법에 대한 몇 가지 예가 있습니다.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true">버퍼 검사 점</span> <span data-close-text="true">버퍼 검사 점</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">모든 플랫폼의 모든 GameMaker Studio 2 게임에서 버퍼를 사용하는 방법의 간단한 예는 <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer ()</span></a> 함수입니다. 이 함수는 현재 게임 상태의 &quot;스냅 샷&quot;을 가져 와서 미리 정의 된 버퍼에 저장 한 다음 읽은 다음 해당 시점에서 게임을 다시로드 할 수 있습니다.</p>
    <p class="note"><strong>참고</strong> :이 기능은 매우 제한되어 있으며 초보자가 체크 포인트 시스템을 빠르게 시작하고 실행하도록 설계되었지만 고급 사용자는 게임이 저장되지 않기 때문에 파일 기능을 사용하여 자신의 시스템을 코딩하는 것을 선호 할 수 있습니다 데이터 구조, 표면, 추가 된 스프라이트 등과 같이 런타임에 만들 수있는 모든 동적 리소스</p>
    <p class="dropspot">가장 먼저해야 할 일은 저장 및 로딩을 제어 할 새 객체를 생성하는 것입니다. 따라서 객체를 만들어 <strong>Create Event를 지정하십시오</strong> . 이 경우 다음 코드를 배치 할 수 있습니다.</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br/> StateSaved = false;</p>
    <p class="dropspot">첫 번째 줄은 1024 바이트의 증가 버퍼 (저장된 데이터의 최종 크기를 모르기 때문에)를 생성하고 1 바이트로 정렬합니다. 그런 다음 변수를 생성하여 게임이 저장되었는지 여부를 확인합니다 (로드하는 데 사용됨).</p>
    <p class="dropspot">다음으로 현재 게임 상태를 생성 된 버퍼에 저장하는 <strong>Keypress 이벤트를</strong> 추가합니다 (예 <strong>:)</strong> .</p>
    <p class="code">StateSaved = true;<br/> buffer_seek(SaveBuffer, buffer_seek_start, 0);<br/> game_save_buffer(SaveBuffer);
    </p>
    <p class="dropspot">위는 먼저 제어 변수를 <span class="inline">true로</span> 설정 한 다음 (게임에 버퍼를 저장할 때 저장 됨) 현재 저장 상태를 쓰기 전에 버퍼의 시작 부분을 찾습니다. 왜 <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek ()를 사용</span></a> 합니까? 이 페이지에서 이미 언급했듯이 데이터가 추가 된 마지막 위치에서 버퍼를 읽고 씁니다. 즉, 버퍼를 설정하지 않으면 시작 시점으로 돌아가서 저장할 때 현재 버퍼 읽기 / 쓰기 위치에서 데이터를 버퍼에 추가하게됩니다. 따라서 <span class="inline">buffer_seek ()</span> 함수를 사용하여 tell을 버퍼 시작으로 이동합니다.</p>
    <p class="dropspot">현재 게임 상태를 버퍼에 저장했습니다. 다음 단계는 다른 <strong>Keypress 이벤트</strong> 에서로드하는 방법을 코딩하는 것입니다.</p>
    <p class="code">if StateSaved<br/>    {<br/>    buffer_seek(SaveBuffer, buffer_seek_start, 0);<br/>    game_load_buffer(SaveBuffer);<br/>    }</p>
    <p class="dropspot">그런 다음 위의 코드를 배치 한 이벤트가 끝날 때 게임이로드됩니다.</p>
    <p class="note"><strong>참고</strong> : 이것은 같은 방에서만 사용되며 게임을 닫거나 다시 시작한 후에는 완전히 저장된 게임을 생성하지 않습니다!</p>
    <p class="dropspot">컨트롤러 객체에 추가 할 마지막 것은 &quot;정리&quot;코드입니다. 버퍼는 메모리에 저장됩니다. 따라서 버퍼를 다 썼을 때 정리하지 않으면 메모리 누수가 발생하여 게임이 지연되고 충돌 할 수 있습니다. 따라서 <strong>다른</strong> 이벤트 범주의 <strong>룸 엔드 이벤트</strong> 를 다음과 같이 추가 할 수 있습니다.</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">이제이 오브젝트를 룸에 배치 할 수 있고 키를 누르면 저장하고 룸 상태를 버퍼에서로드 할 수 있습니다.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true">네트워크 버퍼</span> <span data-close-text="true">네트워크 버퍼</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">GameMaker Studio 2 <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">네트워킹 기능으로</a> 작업 할 때 네트워크 연결을 통해 전송되는 데이터 패킷을 생성하려면 버퍼를 사용해야합니다. 이 예제는 이것이 어떻게 수행되는지 보여 주려고하지만 네트워킹 가능성의 범위 때문에 전체 네트워킹 시스템이 아닌 버퍼 자체를 사용하는 방법 만 보여 주도록 설계되었습니다.</p>
    <p class="dropspot">가장 먼저 보여 드릴 것은 네트워크 연결의 클라이언트 측에 버퍼를 만들고 사용하는 것입니다. 이 버퍼는 서버로 전송 될 수있는 작은 데이터 패킷을 만드는 데 사용되므로 인스턴스의 <strong>이벤트 생성</strong> 에서 다음과 같은 버퍼를 할당합니다.</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">버퍼를 작게 (256 바이트) 만듭니다. 대량의 데이터를 보유 할 의도가 아니기 때문에 언제든지 전송할 데이터를 더 추가해야 할 때 오류가 발생하지 않도록 버퍼를 증가시킵니다. 편의상 하나로 설정되어 있습니다.</p>
    <p class="dropspot">이제 클라이언트가 서버로 데이터를 보내길 원한다고 가정 해 봅시다. 이를 위해 버퍼 &quot;패킷&quot;을 작성해야합니다.이 예에서는 플레이어가 게임을 이동하기 위해 <em>왼쪽 화살표</em> 를 누를 때와 같이 <strong>Key Press Event</strong> 를 전송합니다. 이를 위해 필요한 데이터를 먼저 버퍼에 쓴 다음 전송합니다.</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br/> buffer_write(buff, buffer_u8, 1);<br/> buffer_write(buff, buffer_s16, vk_left);<br/> buffer_write(buff, buffer_bool, true);<br/> network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">버퍼에 쓰기 전에 네트워킹이 항상 버퍼의 시작에서 데이터를 가져 오기 때문에 &quot;tell&quot;을 버퍼의 시작으로 설정했습니다. 그런 다음 검사 값 (서버에서 처리 할 이벤트 유형을 결정하는 데 사용됨), 사용중인 키 및 키 상태 (이 경우에는 눌린 경우 참)를 작성합니다. 그런 다음이 버퍼는 네트워크 기능에 의해 데이터 패킷으로 전송됩니다. 우리는 전체 버퍼를 보내지 않습니다! 버퍼의 현재 읽기 / 쓰기 위치를 반환하기 위해 buffer_tell 함수를 사용하여 기록 된 데이터 만 보냅니다 (버퍼에 쓰면 &quot;tell&quot;이 쓰여진 내용의 끝으로 이동 함을 기억하십시오). 이것은 필요한 것보다 더 많은 바이트를 보내지 않기위한 것입니다.</p>
    <p class="dropspot">서버에서 데이터를받는 것은 어떻습니까? 수신 된 데이터 패킷은 서버의 버퍼에 기록 된 다음 게임을 업데이트하는 데 사용해야합니다. 이를 위해 아래의 간단한 코드에서 볼 수 있듯이 서버의 네트워크 컨트롤러 개체에서 <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">네트워킹 비동기 이벤트</a> 를 사용합니다.</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br/> if cmd == buffer_read(buff, buffer_u8);<br/>    {<br/>    key = buffer_read(buff, buffer_s16);<br/>    key_state = buffer_read(buff, buffer_bool);<br/>    }</p>
    <p class="dropspot">비동기 이벤트에는 네트워크에서 들어오는 데이터의 유형에 따라 다른 정보가 포함 된 특수한 임시 DS 맵 <span class="inline">async_load</span> (이벤트가 끝나면 메모리에서 자동으로 제거됨)가 포함됩니다. 이 경우 맵이 확인되었고 클라이언트에서 보낸 버퍼 데이터 패킷 인 것으로 가정합니다. 이제 버퍼에있는 첫 번째 데이터를 검사하여 어떤 종류의 이벤트가 전송되었는지 확인합니다.이 경우 &quot;1&quot;값은 주요 이벤트를 나타내지 만 이러한 값을 코딩 할 때 이러한 값을 보유 할 상수를 정의해야합니다. 사물을 단순화 한 다음 누른 키와 상태를 저장하십시오 ( <span class="inline">true</span> = 눌림, <span class="inline">false</span> = 놓음). 그런 다음이 정보는 모든 클라이언트를 보내는 클라이언트 플레이어의 새로운 상태로 업데이트하는 데 사용됩니다.</p>
    <p class="note"><strong>참고</strong> : DS 맵에서 생성 된 버퍼는 네트워크 비동기 이벤트가 끝나면 자동으로 제거되므로 여기서 <span class="inline" style="font-size: 14px">buffer_delete ()</span> 를 사용할 필요가 없습니다.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <div class="Participant">번역 : 구글번역기</div>
  <div class="Original_text" onclick="winopen('Additional_Information/Guide_To_Using_Buffers.htm');">영문 페이지 보기</div>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">뒤로: <a href="Additional_Information.htm">추가 정보</a></div>
        <div style="float:right">다음: <a href="Bitwise_Operators.htm">비트 연산자</a></div>
      </div>
    </div>
    <h5>© 저작권 YoYo Games Ltd. 2020 판권 소유</h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->

</body></html> 