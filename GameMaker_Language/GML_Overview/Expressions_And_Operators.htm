<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "9.1.1_6";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Expressions And Operators</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining the different GML expressions"/>
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~"/>
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Expressions And Operators">
        <span>식과 연산자</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>이 페이지를 전체 내용으로 보려면 여기를 클릭하십시오</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>식과 연산자</h1>
  <p>표현식은 일반 숫자, 변수, 문자열 또는 함수와 하나 이상의 <strong>연산자</strong> (더하기, 빼기, 곱하기 등)를 포함 할 수있는 수학 문구입니다. 표현식에 사용되는 값은 실수 (예 : <span class="inline">3.4 * 6</span> ), <span class="inline">$</span> 기호 (예 : <span class="inline">$ 00FFAA | $ 88FFAA</span> )로 시작하는 16 진수, 큰 따옴표 사이의 문자열 (예 : <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span> ) 또는 더 복잡한 수 있습니다. 여러 연산자와 값을 사용하는 표현식</p>
  <p>식의 경우 우선 순위에 따라 다음 연산자가 존재합니다.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true">할당 (=)</span> <span data-close-text="true">할당 (=)</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><b>=</b> -변수에 값을 할당하는 데 사용됩니다. GameMaker Studio 2에서 변수를 비교하는 데 <i>에도</i> 사용할 수 있으며 예제 및 기타 사람들 코드에서이를 확인할 수 있습니다. 그러나 이것은 이전 <i>GameMaker</i> 버전의 유산 <i>이므로</i> 다음 예제와 같이 <b>==</b> 연산자를 사용하여 비교하고 <b>=</b> 를 할당해야합니다.</p>
    <p class="code">a = 12;<br/> speed = 5;<br/> val = (old_val + 5);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true">결합 (&amp;&amp;, ||, ^^)</span> <span data-close-text="true">결합 (&amp;&amp;, ||, ^^)</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b>&amp;&amp;, ||, ^^ (및 xor)</b> -부울 값을 결합하여 true 또는 false를 제공합니다. 다음 예제 중 하나라도 <tt>true</tt> 로 해결되면 코드가 실행됩니다.</p>
    <p class="code">if (a == b &amp;&amp; c == d) {do something...}  // and<br/> if (a == b || c ==d) {do something...}   // or<br/> if (a == b ^^ c == d) {do something...}  // xor</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true">(&lt;, &lt;=, ==,! =,&gt;,&gt; =)</span> <span data-close-text="true">비교 (&lt;, &lt;=, ==,! =,&gt;,&gt; =)</span></a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b>&lt;, &lt;=, ==,! =,&gt;,&gt; =</b> -이들은 비교이며 <tt>true</tt> 또는 <tt>false</tt> 결과 만 제공 할 수 있습니다 (true는 1로, false는 0으로 해석 될 수 있음). 사용 예 :</p>
    <p class="code">if (a &lt; b) {do something...}<br/> if (a != b) {do something...}</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true">비트 단위 (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</span> <span data-close-text="true">비트 단위 (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b>|, &amp;, ^, &lt;&lt;, &gt;&gt;</b> : 여기에서 비트 단위 연산을 수행 할 수 있습니다. = 비트 단위 또는 &amp; = 비트 단위, ^ = 비트 단위 xor, &lt;&lt; = 왼쪽으로 이동, &gt;&gt; = 오른쪽으로 이동 사용 예 :</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br/> if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">: 당신은 비트 연산자와 그들이 섹션에서 어떻게 사용하는 방법에 대한 자세한 내용은 찾을 수 있습니다 <a href="../../Additional_Information/Bitwise_Operators.htm">비트 연산자를</a> .</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true">산술 (+,-, *, /)</span> <span data-close-text="true">산술 (+,-, *, /)</span></a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b>+,-, *, /</b> -더하기, 빼기, 곱하기 및 나누기. 사용 예 :</p>
    <p class="code">c = a * b;<br/> str = a + &quot;world&quot;;</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true">증가 / 감소 (++,-)</span> <span data-close-text="true">증가 / 감소 (++,-)</span></a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><strong>++</strong> , <strong>-</strong> : 값에서 하나를 더하거나 뺍니다. 이 값을 더하거나 뺄 값을 전후에 배치하면 약간 다른 결과가 나타납니다. 예를 들면 다음과 같습니다.</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++ a</span> 는 변수를 증가시키고 증가 된 값을 반환합니다.</li>
      <li class="dropspot"><span class="inline">a ++</span> 는 변수를 증가 시키지만 증가하기 전에 값을 반환합니다.</li>
    </ul>
    <p class="dropspot">따라서 다음과 같은 것이 있으면</p>
    <p class="code">var a = 1;<br/> show_debug_message(string(a++));
      <br/> show_debug_message(string(++a));
    </p>
    <p class="dropspot">디버그 출력은 1과 3입니다. 다음은 몇 가지 사용 예입니다.</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br/>     {<br/>     do something...<br/>     };</p>
    <p class="code">if (hit == true)<br/>     {<br/>     --score;<br/>     }</p>
    <p class="note"><strong>참고</strong> : YoYo Compiler 대상 플랫폼 (YYC로 표시됨)에서 이러한 표현식은 왼쪽에서 오른쪽으로 평가되는 반면 다른 모든 대상 플랫폼에서는 오른쪽에서 왼쪽으로 평가됩니다. 이는 다음을 의미합니다.</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">플랫폼에 따라 다른 결과를 제공합니다.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true">나누기와 모듈로 (div, %, mod)</span> <span data-close-text="true">나누기와 모듈로 (div, %, mod)</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong>div, mod (%)</strong> -Division 및 modulo. 여기서 div는 값을 정수 몫으로 만 나눌 수있는 양을 제공하고 mod는 나눗셈의 나머지 만 제공합니다. 정수 값을 사용하여 div 또는 mod 만 가능합니다. 사용 예 :</p>
    <p class="code">secs = time mod 60;<br/> time_str = string(time div 60);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true">단항 (!,-, ~)</span> <span data-close-text="true">단항 (!,-, ~)</span></a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">또한 다음과 같은 <strong>단항</strong> 연산자가 있습니다.</p>
    <ul class="dropspotlist">
      <li class="dropspot"><strong>!</strong> : boolean &quot;not&quot;이므로 <span class="inline">! true == false</span></li>
      <li class="dropspot"><strong>-</strong> : 다음 실수 또는 정수 값을 무효화합니다 (문자열 또는 부울에는 유효하지 않음).</li>
      <li class="dropspot"><strong>~</strong> : 다음 값을 비트 단위로 무효화</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>모든 표현식의 값으로 값을 반환하는 숫자, 변수 또는 함수를 사용할 수 있으며 하위 표현식도 대괄호 사이에 배치 할 수 있습니다. 모든 연산자는 실수 값에 대해 작동하지만 <em>비교</em> 는 문자열에 대해서도 작동하며 &quot; <strong>+</strong> &quot;연산자는 문자열을 연결하는 데 사용될 수 있습니다.</p>
  <p>단일 식으로 여러 작업을 수행 할 때는 다른 방법으로 명시 적으로 언급되지 않은 경우 다른 플랫폼에서 다르게 수행 될 수 있으므로 대괄호 <span class="inline">()</span> 를 사용하여 작업 순서를 구분하는 것이 <b>매우 중요</b> 합니다. 예를 들어 다음 코드를 고려하십시오.</p>
  <p class="code">a = b == c || d;</p>
  <p>다른 타겟 컴파일러는 명시 적으로 표시되지 않기 때문에 다른 순서로 작업을 수행하여 게임을 할 때 예상치 못한 &quot;홀수&quot;결과를 발생시킵니다. 이를 피하려면 <span class="inline">()</span> 를 사용하여 다음과 같이 부품을 분리하십시오.</p>
  <p class="code">a = (b == c || d);   //better<br/> a = ((b == c) || d); //best</p>
  <p>또한 단일 코드 블록에서 다양한 작업과 exprssion을 사용할 때는 이것도 분리되어야합니다. 예를 들어 다음 <em>은</em> 유효한 코드처럼 <em>보입니다</em> .</p>
  <p>만약 my_var == your_var ++ their_var;</p>
  <p>그러나 컴파일러는이를 두 가지 방법 중 하나로 해석 할 수 있습니다.</p>
  <p class="code">if my_var == your_var++ then their_var;<br/>
    <br/> // or<br/>
    <br/> if my_var == your_var then ++their_var;</p>
  <p>이제 코드 중 하나가 약간 어리 석다는 것을 알 수 있습니다.하지만 우리가 달성하고자하는 것과 수행하고자하는 것을 알고 있기 때문에 컴파일러는 그렇지 않습니다. 그것이 보는 것은 그들 사이에 ++ 연산자가있는 두 변수이므로 적용 할 변수를 선택해야합니다. 따라서 <strong>항상 명시 적으로 식, 연산 및 명령문을 괄호로 묶어야합니다</strong> . 위 코드의 올바른 버전은 다음과 같아야합니다.</p>
  <p class="code">if (my_var == your_var)<br/> {
    <br/> ++their_var;
    <br/> }
  </p>
  <p>이것은 더 장황하게 보일 수 있지만 수행되는 작업에 대한 모호성은 없으며 모든 플랫폼에서 일관되게 컴파일되고 동작합니다. 또한 현재 대괄호를 사용하지 않고 표현식과 명령문을 연결할 수는 있지만 이것은 레거시 기능이므로 앞으로 GML에서 더 이상 사용되지 않고 제거 될 수 있으므로 대괄호를 적절하게 사용하면 코드를 &quot;미래에 방지&quot;할 수 있습니다. 어쨌든 일반적으로 좋은 습관입니다).</p>
  <p>다음은 다양한 표현의 최종 예입니다.</p>
  <p class="code">{<br/> x = 23 div 2;<br/> colour = $FFAA00 + $00BB12;<br/> str = &quot;hello&quot; + &quot;world&quot;;<br/> y += 5;<br/> x *= y;<br/> x = y &lt;&lt; 2;<br/> x = 23 * ((2 + 4) / sin(y));<br/> b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br/> }
  </p>
  <p>마지막으로 주목해야 할 것은 특정 <a href="../GML_Reference/Data_Structures/Data_Structures.htm">데이터 구조</a> 및 <a href="Arrays.htm">배열</a> 과 함께 사용하기 위해 <b>접근</b> 자라는 표현 &quot;단축키&quot;가 있다는 것입니다. 이를 통해 함수 호출을 사용하지 않고도 이러한 형식 내에서 데이터를 빠르고 쉽게 추가하거나 교체 할 수 있습니다. 자세한 내용은 다음 페이지를 참조하십시오</p>
  <ul class="colour">
    <li><a href="Accessors.htm">접근 자</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="Participant">번역 : 구글번역기</div>
  <div class="Original_text" onclick="winopen('GameMaker_Language/GML_Overview/Expressions_And_Operators.htm');">영문 페이지 보기</div>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">뒤로: <a href="GML_Overview.htm">GML 개요</a></div>
        <div style="float:right">다음: <a href="Accessors.htm">접근 자</a></div>
      </div>
    </div>
    <h5>© 저작권 YoYo Games Ltd. 2020 판권 소유</h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->

</body></html> 