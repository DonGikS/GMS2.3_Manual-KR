<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "9.1.1_8";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Script Functions And Variables</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros"/>
  <meta name="rh-index-keywords" content="Script Functions And Variables"/>
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Script Functions And Variables">
        <span>스크립트 함수와 변수</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>이 페이지를 전체 내용으로 보려면 여기를 클릭하십시오</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>스크립트 함수와 변수</h1>
  <p>스크립트 자산은 본질적으로 하나 이상의 사용자 정의 함수 또는 변수의 모음으로, <a href="../../The_Asset_Editors/Scripts.htm">스크립트 편집기</a> 에서 간단한 코드 조각으로 작성합니다. 스크립트에서 정의한 함수는 내장 <a href="Runtime_Functions.htm">런타임 함수</a> 와 같이 식을 확인하거나 값을 반환하거나 GameMaker 언어가 허용하는 다른 작업을 수행 할 수 <a href="Runtime_Functions.htm">있습니다</a> .</p>
  <p>스크립트 기능은 일반적으로 둘 이상의 장소 또는 객체에서 사용하는 코드 블록이 있거나 모듈 방식으로 여러 객체에서 코드 블록을 사용하려는 경우에 사용해야합니다. 스크립트를 사용하여 함수를 정의한다는 것은 필요할 때 함수를 한 번만 변경할 수 있으며 함수를 호출하는 모든 객체에 의해 변경이 &quot;선택&quot;됨을 의미합니다.</p>
  <p>스크립트는 조직적인 관점에서 매우 유용 할 수 있습니다. 스크립트는 동일한 네임 스페이스 내에서 모두 작동하는 기능 그룹을 생성 할 수 있기 때문입니다. 예를 들어 게임의 인스턴스 간 충돌과 관련된 여러 기능이 모두있을 수 있으므로 &quot; <span class="inline">Collision_Functions</span> &quot;스크립트를 작성하고이 모든 기능을 함께 저장합니다.</p>
  <p>함수가 포함 된 스크립트를 작성할 때 다음 형식을 사용하여 함수를 작성해야합니다.</p>
  <p class="code"><span>function &lt;name&gt;( &lt;parameter1&gt;, &lt;parameter2&gt;, etc... )</span><br/>
    <span>    {</span><br/>
    <span>    &lt;statement1&gt;;</span><br/>
    <span>    &lt;statement1&gt;;</span><br/>
    <span>    ...</span><br/>
    <span>    }</span></p>
  <p>또는:</p>
  <p class="code"><span><span>&lt;name&gt; = </span>function( &lt;parameter1&gt;, &lt;parameter2&gt;, etc... )</span><br/>
    <span>    {</span><br/>
    <span>    &lt;statement1&gt;;</span><br/>
    <span>    &lt;statement1&gt;;</span><br/>
    <span>    ...</span><br/>
    <span>    }</span></p>
  <p>그러나 일반적으로 함수를 구체적으로 스크립트 함수로 정의하므로 스크립트 함수의 <em>첫 번째</em> 양식을 사용합니다. 즉, <a href="Variables_And_Variable_Scope.htm">범위</a> 가 <strong>전역 적</strong> 이며 <strong>스크립트 색인</strong> 이 지정되며 식별하기 위해 <span class="inline">글로벌</span> 접 두부가 필요하지 않음을 의미합니다. 컴파일러가이를 스크립트 함수로 인식하기 때문입니다. 대신 두 번째 형식을 사용하면 전역 범위 <a href="Method_Variables.htm">메서드 변수</a> 가 생성되므로 IDE에서 스크립트 함수로 인식 <em>되지 않으므로</em> 코드에서 참조 할 때 <span class="inline">전역</span> 접두사를 사용해야합니다.</p>
  <p class="note"><strong>참고</strong> : 스크립트에서 두 양식을 모두 사용한 다음 각 양식에서 런타임 함수 <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof ()</a> 를 호출하여이를 확인할 수 있습니다. 하나는 &quot;숫자&quot;로 분류되며, 스크립트 색인 ID를 반환하므로 다른 하나는 &quot;방법&quot;으로 분류됩니다.</p>
  <p>간단한 스크립트는 다음과 같이 함수의 속성을 정의하기 위해 주석을 추가하는 것이 좋습니다 (자세한 내용은 <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JSDoc 주석</a> 섹션 참조).</p>
  <p class="code">/// @function                 log(message);<br/> /// @param {string}  message  The message to show<br/> /// @description              Show a message whenever the function is called.<br/>
    <br/> function log(message)<br/>     {
    <br/>     show_debug_message(message);
    <br/>     }
  </p>
  <p>스크립트에 대한 추가 기능은 위에 표시된 것과 동일한 형식을 사용하여 스크립트 자산 내에서 하나씩 추가 할 수 있습니다.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png"/>스크립트의 함수는 런타임 함수와 마찬가지로 값을 반환 할 수 있으며 표현식에서 사용할 수 있습니다. 이를 위해 <a href="Language_Features/return.htm"><tt>return</tt></a> 문을 사용합니다.</p>
  <p class="code">return &lt;expression&gt;</p>
  <p><strong><i>함수</i></strong> 의 <strong><i>실행은 return 문에서 끝납니다</i></strong> . 즉, return이 호출 된 후에 오는 코드는 <i>실행되지 않습니다</i> . 다음은 &quot; <span class="inline">sqr_calc</span> &quot;라는 스크립트의 간단한 예제 함수입니다.이 함수는 전달 된 모든 값의 제곱을 계산하며 전달 된 매개 변수가 실수가 아닌 경우 오류 포착을 포함합니다.</p>
  <p class="code">/// @function           sqr_calc(val);<br/> /// @param {real}  val  The value to calculate the square of<br/> /// @description        Calculate the square of the given value<br/>
    <br/> function sqr_calc(value)<br/>     {
    <br/>     if !is_real(value)<br/>         {
    <br/>         return 0;<br/>         }
    <br/>     else
    <br/>         {
    <br/>         return (value * value);<br/>         }
    <br/>     }
  </p>
  <p>리턴 값 <em>없이</em> 스크립트 함수를 작성하면 코드에서 리턴 값을 검사하여 기본적으로 <span class="inline">정의되지 않은</span> 값을 얻습니다.</p>
  <p>코드에서 스크립트 함수를 호출하려면 런타임 함수를 호출 할 때와 같은 방식으로 사용하십시오. 즉, 매개 변수 값을 괄호 안에 사용하여 함수 이름을 작성하십시오. 따라서 위 스크립트는 다음과 같이 호출됩니다.</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br/>     {
    <br/>     val = scr_sqr(amount);<br/>     }
  </p>
  <p class="note"><strong>NOTE</strong>: When using your own functions from scripts in the code editor, you can press<span> <img alt="F1 Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_f1.png" width="55"/>또는 마우스 가운데 버튼을 클릭하십시오 함수 이름에서 직접 편집 할 수있는 스크립트가 포함 된 스크립트를 엽니 다.</p>
  <p>스크립트 <i>이름</i> 은 <b>포함 된 함수와 독립적</b> 이므로 스크립트의 <i>이름</i> 을보다 &quot;상식적인&quot;방식으로 지정할 수 있습니다. 예를 들어 모든 AI 함수는 &quot; <span class="inline">Enemy_AI</span> &quot;스크립트를 사용할 수 있습니다 (표준에 따름). 영숫자 및 밑줄 &quot;_&quot;의 자산 이름 지정 규칙). 그러나 게임에서 스크립트를 계속 호출 할 수 있으며 스크립트에서 정의한 기능과 동일하게 스크립트 이름을 지정할 수 있습니다. GameMaker Studio 2가 자산 참조를 저장하는 방식으로 인해 문제가 발생할 수 있습니다. 예를 들어 인스턴스에서 호출 된이 코드를 고려하십시오.</p>
  <p class="code">function indirectCall(func, arg)<br/>     {
    <br/>     func(arg);
    <br/>     }
    <br/> indirectCall(myscript, arg);</p>
  <p>위의 코드는 메소드 내에서 &quot;myscript&quot;라는 스크립트를 호출하려고 시도하는데이 경우 실패합니다. 인라인 함수가 실제로 스크립트 자산의 <em>인덱스</em> 를 사용하고 실제로 스크립트를 호출 <strong>하지 않기 때문입니다</strong> . 예 : 스크립트 인덱스가 &quot;4&quot;로 해석되면 기본적으로 함수는 <tt>4 (arg)를</tt> 호출합니다 <tt>.</tt> 이해가되지 않습니다. 대신 코드는 다음 두 가지 방법 중 하나로 구성되어야합니다.</p>
  <p class="code">function indirectCall(func, arg)<br/>     {
    <br/>     func(arg);
    <br/>     }
    <br/> indirectCall(method(undefined, myscript), arg);<br/>
    <br/> // OR<br/>
    <br/> function indirectCall(func, arg)<br/>     {
    <br/>     script_execute( func, arg);<br/>     }
    <br/> indirectCall(myscript, arg);</p>
  <p>특히 스크립트에 단일 함수가 하나 있고 스크립트 이름과 같은 이름을 가진 레거시 프로젝트를 작업 할 때주의해야합니다. 그러나 <em>실제로이</em> 작업을 수행해서는 <em>안되며</em> 스크립트에 포함 된 기능과 독립적으로 스크립트 이름을 지정해야합니다.</p>
  <p>이를 통해 스크립트와 스크립트에 포함 된 기능에 대해 알아야 할 최종적이고 중요한 정보를 얻을 수 있습니다. 스크립트는 <b>글로벌</b> 수준에서 구문 분석되며 <strong>게임 시작시 컴파일됩니다</strong> . 이것은 <em>기술 적</em> 으로 스크립트의 모든 함수가 &quot;언 바운드&quot; <a href="Method_Variables.htm">메서드 변수</a> 이며 스크립트의 함수 외부에서 선언 된 모든 변수는 <a href="Variables/Global_Variables.htm">전역 변수</a> 로 간주됩니다. 예를 들어 다음 스크립트를 고려하십시오.</p>
  <p class="code">function Foo()<br/>     {
    <br/>     // Do something<br/>     }
    <br/> blah = 10;<br/> function Bar()<br/>     {
    <br/>     // Do something else<br/>     }
  </p>
  <p>위의 경우 <tt>Foo</tt> 및 <tt>Bar</tt> 함수를 정의했을뿐만 아니라 변수 <tt>blah</tt> 도 정의했으며 모든 범위가 <b>전역</b> 범위에서 작성된 것으로 간주됩니다. 컴파일러가 이러한 함수가 스크립트의 일부라는 것을 이해하기 때문에 함수는 <tt>global</tt> 키워드를 인식 할 필요가 없지만, <tt>blah</tt> 에 액세스하려면 다음을 수행해야합니다.</p>
  <p class="code">val = global.blah;</p>
  <p>즉, 나중에 문제를 방지하기 위해 스크립트에서 <b>전역 변수</b> 를 작성할 때 <b>항상 명시 적으로 입력</b> 하는 것이 좋습니다. 스크립트는 또한 <strong>매크로</strong> 나 <strong>열거 형</strong> ( <a href="Variables/Constants.htm">상수</a> )을 정의하기에 이상적인 장소입니다. 함수 외부의 스크립트에 추가하면 게임 코드가 실제로 실행되기 전에 사용할 수있게됩니다. 아래는 게임에 대해 다른 전역 범위 값을 생성하는 스크립트의 예입니다.</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br/> global.player_score = 0;<br/> global.player_hp = 100;<br/> global.pause = false;<br/> global.music = true;<br/> global.sound = true;<br/>
    <br/> enum rainbowcolors {<br/>     red,<br/>     orange,<br/>     yellow,<br/>     green,<br/>     blue,<br/>     indigo,<br/>     violet<br/>     }<br/>
    <br/> #macro weapon_num 3<br/> #macro weapon_gun 0<br/> #macro weapon_bomb 1<br/> #macro weapon_knife 2</p>
  <p>이 모든 상수가 함수 호출 외부에서 어떻게 설정되는지 확인하십시오. 즉, 다른 모든 것보다 <em>전역</em> 범위에서 초기화됩니다. 즉, 스크립트를 사용하여 <em>인스턴스</em> 범위에서 변수를 초기화하려면 다음과 같이 함수로 변수를 래핑해야합니다.</p>
  <p class="code">/// @function                init_enemy();<br/> /// @description             Initialise enemy instance vars<br/>
    <br/> function init_enemy()<br/>     {
    <br/>     hp = 100;<br/>     dmg = 5;<br/>     mana = 50;<br/>     }
  </p>
  <p>따라서 스크립트를 사용하여 게임을 시작하기 전에 매크로, 열거 형 및 전역 변수를 생성하여 언제든지 사용할 수 있으며 사용할 수있는 &quot;언 바운드&quot;메서드 (사용자 정의 함수)를 만드는 데에도 사용할 수 있습니다. 게임에서 GML 런타임 함수와 같은</p>
  <p>스크립트 함수에 대해 마지막으로 주목해야 할 것은 <strong>웹을</strong> 위해 개발하는 경우 (예 : <strong>HTML5</strong> 타겟팅) 함수를 스크립트에 추가 할 때 사용할 수있는 추가 함수 프로토콜이 있다는 것입니다. 함수 이름 <tt>앞에는 gmcallback_</tt> , 예를 들면 다음과 같습니다.</p>
  <p class="code">gmcallback_create_button</p>
  <p>위의 함수 이름을 사용한다는 것은 <tt>gmcallback_create_button ()</tt> 함수가 난독 처리되지 않으며 <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><tt>clickable_ *</tt></a> 함수를 사용할 때와 같이 JavaScript 확장 및 게임의 다른 영역에서 사용될 수 있음을 의미합니다.</p>
  <p> </p>
  <p> </p>
  <div class="Participant">번역 : 구글번역기</div>
  <div class="Original_text" onclick="winopen('GameMaker_Language\GML_Overview\Script_Functions.htm');">영문 페이지 보기</div>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">뒤로: <a href="GML_Overview.htm">GML 개요</a></div>
        <div style="float:right">다음: <a href="Method_Variables.htm">메소드 변수</a></div>
      </div>
    </div>
    <h5>© 저작권 YoYo Games Ltd. 2020 판권 소유</h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->

</body></html> 