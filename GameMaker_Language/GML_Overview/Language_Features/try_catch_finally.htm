<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../..";
    gCommonRootRelPath = "../../..";
    gTopicId = "9.1.2.0_13";
  
//]]></script>

  <script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions"/>
  <meta name="rh-index-keywords" content="try,catch,finally"/>
  <meta name="search-keywords" content="try,catch,finally"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="try / catch / finally">
        <span>시도 / 캐치 / 마지막으로</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>이 페이지를 전체 내용으로 보려면 여기를 클릭하십시오</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>시도 / 캐치 / 마지막으로</h1>
  <p><tt>try</tt> , <tt>catch</tt> 및 <tt>finally</tt> 문을 게임에서 오류 검사에 사용할 수 있으며 코드 블록을 테스트하고 <a href="../../../Additional_Information/Errors/Runner_Errors.htm">런타임 예외가</a> 발생할 경우 발생하는 상황을 제어 할 수 있습니다. 이를 사용하면 예외로 게임이 종료되고 표준 오류 메시지가 사용자에게 표시되는 것을 방지 할 수 있지만, 로그 파일 저장 (예 :) 및 게임을 정상적으로 종료하는 등의 경우 다음에 발생하는 상황을 처리해야합니다 ( 아무 것도 선택하지 않으면 게임이 불안정 해지고 올바르게 수행되지 않을 수 있습니다.</p>
  <p>가장 기본적인 <tt>try</tt> 구문은 다음과 같습니다.</p>
  <p class="code">try<br/>     {
    <br/>     &lt;statement1&gt;;
    <br/>     &lt;statement2&gt;;
    <br/>     ...<br/>     }
  </p>
  <p>그러나 실제로 코드를 생성 할 수있는 예외를 처리하기 위해 아무 것도 <tt>시도</tt> 하지 않아도 도움이되지 않으므로 일반적으로 다음 구문을 사용하여이를 <tt>catch</tt> 와 쌍을 이룹니다.</p>
  <p class="code">try<br/>     {
    <br/>     &lt;statement1&gt;;
    <br/>     &lt;statement2&gt;;
    <br/>     ...
    <br/>     }
    <br/> catch(&lt;variable&gt;)
    <br/>     {
    <br/>     &lt;statement1&gt;;
    <br/>     &lt;statement2&gt;;
    <br/>     ...
    <br/>     }
  </p>
  <p><tt>catch</tt> 는 이전 <tt>시도</tt> 에서 예외가 발생했을 때 다음 블록에 제공된 추가 코드를 실행할 수 있도록합니다. 이것이 런타임 예외 인 경우 제공된 변수를 사용하여 다음 정보를 포함 할 <a href="../Structs.htm">구조체</a> 에 액세스 할 수 있습니다.</p>
  <p class="code">{<br/> message : &quot;&quot;,               // a string that is a short message for this exception<br/> longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br/> script : &quot;&quot;,                // a string
    that describes where the exception came from<br/> stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br/> }
  </p>
  <p>간단한 사용 예는 다음과 같습니다.</p>
  <p class="code">var a = 0, b = 0, c = 0;<br/> try
    <br/>     {
    <br/>     c = a div b;<br/>     }
    <br/> catch( _exception)<br/>     {
    <br/>     show_debug_message(_exception.message);
    <br/>     show_debug_message(_exception.longMessage);
    <br/>     show_debug_message(_exception.script);
    <br/>     show_debug_message(_exception.stacktrace);
    <br/>     }
  </p>
  <p>예외가 발생했는지 여부에 관계없이 일부 코드를 실행하여 <tt>finally</tt> 블록에 추가 할 수 있습니다. <span class="inline">마지막</span> 구문은 다음과 같습니다.</p>
  <p class="code">finally<br/>     {
    <br/>     &lt;statement1&gt;;
    <br/>     &lt;statement2&gt;;
    <br/>     etc...
    <br/>     }
  </p>
  <p>다음과 같이 조합하여 사용할 수 있습니다.</p>
  <ul class="colour">
    <li><tt>마지막으로</tt> <tt>시도</tt> /</li>
    <li><tt>시도</tt> / <tt>잡기</tt></li>
    <li><tt>시도</tt> / <tt>캐치</tt> / <tt>마지막으로</tt></li>
  </ul>
  <p><tt>finally</tt> 블록 내에서 <a href="break.htm"><tt>break</tt></a> , <a href="continue.htm"><tt>continue</tt></a> , <a href="exit.htm"><tt>exit</tt></a> 또는 <a href="return.htm"><tt>return</tt></a> 문은이 컨텍스트에서 의미가 없으므로 사용할 <em>수 없으며</em> 컴파일러는 사용되는 경우 오류를 생성합니다.</p>
  <p>마지막으로 다양한 <tt>try</tt> / <tt>catch</tt> / <tt>finally</tt> 를 서로 중첩시킬 수도 있습니다.</p>
  <p class="code">var a = 0, b = 0, c = 0;<br/> try
    <br/>     {
    <br/>     try
    <br/>         {
    <br/>         c = a div b;<br/>         }
    <br/>     finally
    <br/>         {
    <br/>         ++a;
    <br/>         }
    <br/>     }
    <br/> catch(_exception)
    <br/>     {
    <br/>     ++a;
    <br/>     show_debug_message(_exception.message);
    <br/>     show_debug_message(_exception.longMessage);
    <br/>     show_debug_message(_exception.script);
    <br/>     show_debug_message(_exception.stacktrace);
    <br/>     }
    <br/> finally
    <br/>     {
    <br/>     show_debug_message(&quot;a = &quot; + string(a));<br/>     }
  </p>
  <p><a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><tt>exception_unhandled_handler ()</tt></a> 함수를 호출하여 기본 GML 오류 메시지를 인계 받고 자체 핸들러 코드를 사용할 수 있다는 점에 주목할 가치가 있습니다. 이 <a href="../Runtime_Functions.htm">런타임 함수</a> 를 사용하면 처리되지 않은 예외가 게임에서 발생할 때마다 호출되는 사용자 정의 <a href="../Method_Variables.htm">메소드</a> 를 제공 할 수 있습니다.</p>
  <p> </p>
  <p> </p>
  <div class="Participant">번역 : 구글번역기</div>
  <div class="Original_text" onclick="winopen('GameMaker_Language\GML_Overview\Language_Features\try_catch_finally.htm');">영문 페이지 보기</div>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">뒤로: <a href="../Language_Features.htm">언어 특징</a></div>
        <div style="float:right">다음: <a href="throw.htm">던지다</a></div>
      </div>
    </div>
    <h5>© 저작권 YoYo Games Ltd. 2020 판권 소유</h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->

</body></html> 