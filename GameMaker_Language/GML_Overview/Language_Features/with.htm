<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../..";
    gCommonRootRelPath = "../../..";
    gTopicId = "9.1.2.0_10";
  
//]]></script>

  <script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>with</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining the with function"/>
  <meta name="rh-index-keywords" content="with"/>
  <meta name="search-keywords" content="with"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="with">
        <span>와</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>이 페이지를 전체 내용으로 보려면 여기를 클릭하십시오</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>와</h1>
  <p><a href="../Addressing_Variables_In_Other_Instances.htm">다른 인스턴스의 변수 주소 지정</a> 섹션에 표시된대로 현재 지정된 코드를 실행중인 인스턴스 이외의 인스턴스에서 변수 값을 읽고 변경할 수 있습니다. 그러나 많은 경우에 다른 인스턴스 내에서 단일 변수를 변경하는 것 이상의 작업을 수행하고 여러 기능과 코드 행이 필요한보다 복잡한 코드 작업을 수행하고자 할 수 있습니다. 예를 들어 게임에서 모든 공 개체를 8 픽셀로 이동한다고 가정합니다. 이 작업은 다음 코드를 통해 간단히 달성 할 수 있습니다.</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>그러나 과제의 오른쪽이 첫 번째 공의 y 좌표 값을 가져 와서 8을 더하기 때문에 이것은 정확하지 않습니다. 다음으로이 새로운 값은 <em>모든</em> 볼의 y 좌표로 설정되므로 모든 볼이 동일한 y 좌표를 얻게되며 다음을 사용하더라도</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>그것은 단순히 첫 번째 진술의 약어이기 때문에 정확히 동일한 효과를 갖습니다. 그렇다면 어떻게 이런 <i>일을</i> 할 수 있습니까? 이것이 <tt>with</tt> 문이 GML에 존재하는 이유입니다. with 문의 구문은 다음과 같습니다.</p>
  <p class="code">with (&lt;expression&gt;)<br/>     {<br/>     &lt;statement&gt;;<br/>     &lt;statement&gt;;<br/>     ...<br/>     }</p>
  <p><a class="tooltip" title="표현식은 특정 우선 순위 규칙 및 다른 값을 리턴하기 위해 연관되는 규칙에 따라 해석되는 하나 이상의 상수, 변수, 연산자 및 / 또는 함수의 조합입니다. 간단한 표현은 (5 + 5)이며 10을 반환합니다.">expression</a> 의 경우 인스턴스 ID, 객체 ID (이 객체의 방에있는 <i>모든 인스턴스</i> 가 코드 블록을 실행해야 함을 나타냄) 또는 특수 <a href="../Instance_Keywords.htm">키워드</a> 중 하나를 사용하여 코드를 수행 할 인스턴스를 하나 이상 지정할 수 있습니다. <tt>전부</tt> 또는 <tt>기타</tt> ). 그러면 실제로 코드를 보유하는 인스턴스 또는 함수에서 표현식에 제공된 인스턴스 (들)에 중괄호 ( <span class="inline">{})로</span> 코드 <strong>범위</strong> 가 변경됩니다.</p>
  <p>표현식이 <span class="inline">with</span> 의 범위를 설정하면 해당 인스턴스가 현재 ( <span class="inline">self</span> ) 인스턴스 인 것처럼 표시된 각 인스턴스에 대해 <a class="tooltip" title="프로그래밍에서 명령문은 수행 할 동작을 나타내는 프로그래밍 언어로 합법적으로 작성된 단일 코드 행입니다. 명령문은 표현식, 연산자 및 함수를 포함하여 자체의 내부 구성 요소를 가질 수 있습니다. 문장의 예는 A = B + 5입니다. GameMaker Studio 2 프로그램은 함께 플레이어를 움직이는 것과 같이 작업을 수행하는 하나 이상의 문장 시퀀스 일뿐입니다.">명령문</a> 이 실행됩니다. 따라서 원래 문제로 돌아가서 볼 객체의 모든 인스턴스를 8 픽셀 아래로 이동하려면 다음과 같이 입력하십시오.</p>
  <p class="code">with (obj_ball)<br/>     {
    <br/>     y += 8;<br/>     }
  </p>
  <p>본질적으로 이것은 루프이며 루프의 각 <a class="tooltip" title="반복은 프로젝트 코드에서 일련의 작업을 통과하는 단일 단계입니다. 컴퓨터 프로그래밍에서 반복의 한 형태는 루프를 통하는 것입니다. 루프는 조건이 충족 될 때까지 특정 코드 세그먼트를 반복하여 계속 진행할 수 있습니다. 컴퓨터가 루프를 실행할 때마다 반복이라고합니다. 간단히 말해서 반복이란 특정 코드 조각을 반복해서 반복하여 특정 작업을 수행하는 프로세스입니다.">반복</a> 마다 코드는 <span class="inline">obj_ball</span> 객체의 한 인스턴스에서 실행됩니다.</p>
  <p>여러 명령문을 실행하려면 다른 코드 블록과 마찬가지로 중괄호 안에 명령문을 포함하십시오. 예를 들어, 예제의 모든 공을 임의의 위치로 옮기고 임의의 속도와 방향을 부여하려면 다음을 사용하십시오.</p>
  <p class="code">with (obj_ball)<br/>     {
    <br/>     x = random(room_width);<br/>     y = random(room_height);<br/>     speed = 1 + random(2);<br/>     direction = random(360);<br/>     }
  </p>
  <p>위에서 언급 한 바와 같이, 명령문 내에서 표시된 인스턴스는 코드 블록을 실행하는 대상 ( <span class="inline">self</span> ) 인스턴스가되었으며 이는 원래 인스턴스 ( <tt>with</tt> 및 code 블록을 포함)가 <tt>다른</tt> 인스턴스가됨을 의미합니다. 예를 들어 모든 볼을 실제로 코드가 포함 된 현재 인스턴스의 위치로 이동하려면 다음을 입력하십시오.</p>
  <p class="code">with (obj_ball)<br/>     {
    <br/>     x = other.x;<br/>     y = other.y;<br/>     }
  </p>
  <p><tt>with</tt> 문은 매우 강력한 도구이며 많은 환경에서 유용하므로 사용 방법을 완전히 이해하는 것이 중요합니다. 아래에 몇 가지 사용 예가 더 있습니다.</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br/>     {
    <br/>     speed = other.speed;<br/>     direction = other.direction;<br/>     }
  </p>
  <p>위의 코드는 <tt>obj_Ball</tt> 의 인스턴스를 만들고 전체 코드 블록을 실행하는 인스턴스의 속도와 방향을 할당합니다.</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br/>     {
    <br/>     instance_destroy();
    <br/>     }
  </p>
  <p>위의 코드는 코드를 실행하는 인스턴스에 가장 가까운 <tt>obj_Ball</tt> 인스턴스를 삭제합니다.</p>
  <p class="code">var _inst = noone;<br/> with (obj_ball)<br/>     {
    <br/>     if (str &gt; other.str)<br/>         {
    <br/>         _inst = id;<br/>         }
    <br/>     }
    <br/> if (_inst != noone)<br/>     {
    <br/>     target = _inst;<br/>     }
  </p>
  <p>위의 코드는 <a href="../Variables_And_Variable_Scope.htm">로컬 변수를</a> 사용하기 때문에 이전 코드보다 약간 더 복잡 <a href="../Variables_And_Variable_Scope.htm">합니다</a> . 이 변수는 인스턴스가 아닌 <em>이벤트</em> 또는 <em>스크립트</em> <em>함수에</em> 로컬이므로 코드 블록 내에서 참조되는 모든 인스턴스에서 사용하고 액세스 할 수 있습니다. 따라서 코드에서이를 특수 키워드 <tt>noone으로</tt> 설정 한 다음 <tt>with</tt> 구성을 사용하여 <tt>obj_Ball의</tt> 모든 인스턴스가 코드 블록을 실행하는 인스턴스의 <tt>str</tt> 변수와 <tt>str</tt> 변수를 확인하도록합니다. 변수의 값이 큰 경우, 그들은 코드, 호출 인스턴스보다 값이 더 만 인스턴스 (또는 키워드 <tt>아무도의</tt> 끝에서 아무도 큰없는 경우 즉, <tt>이달</tt> 지역 변수에 고유 ID를 저장 )는 로컬 변수 <span class="inline">_inst에</span> 저장됩니다.</p>
  <p><font face="Lucida Console"><span style="font-size: 16px;"><b>with</b></span></font> call 내에서 특수 <span class="inline"><a href="break.htm">구분</a></span> 및 <span class="inline"><a href="continue.htm">continue</a></span> 문을 사용할 수 있다는 점은 주목할 가치가 있습니다. 바로 코드 <span class="inline">블록과를</span> 종료하고 예를 들어, <span class="inline">완료해야와</span> 후 이벤트 또는 함수에있는 코드로 이동합니다 <span class="inline">휴식을</span> 사용 :</p>
  <p class="code">var count = 0;<br/> with (obj_Enemy)<br/>     {
    <br/>     if (++count &gt; 10)<br/>         {
    <br/>         break;
    <br/>         }
    <br/>     hp = 100;<br/>     }
  </p>
  <p>위의 코드는 <span class="inline">obj_Enemy</span> 객체의 방에있는 인스턴스를 반복하고 찾은 처음 10 개에 대해 변수 <span class="inline">hp</span> 를 100으로 설정합니다. 인스턴스가 10 개가 넘는 경우 with 코드는 <span class="inline">break</span> 및 end를 호출합니다.</p>
  <p><span class="inline">with</span> 루프에서 <span class="inline">continue</span> 를 사용하는 예는 다음 <span class="inline">과</span> 같습니다.</p>
  <p class="code">with (obj_Enemy_Parent)<br/>     {<br/>     if (invulnerable == true)<br/>         {<br/>         continue;<br/>         }<br/>     hp -= 25;<br/>     }</p>
  <p>이 코드는 부모 <span class="inline">obj_Enemy_Parent</span> 와 함께 모든 인스턴스를 반복 한 다음 각 인스턴스를 검사하여 <span class="inline">무적의</span> 인스턴스 변수가 <span class="inline">true</span> 인지 여부를 확인합니다. 이 경우 <span class="inline">continue</span> 키워드는 루프의 현재 반복을 종료하고 사용 가능한 다음 인스턴스로 이동합니다. 그렇지 않으면 <span class="inline">hp</span> 변수에서 25가 제거됩니다. 해당 부모가있는 모든 인스턴스를 확인할 때까지이 과정이 반복됩니다.</p>
  <p> </p>
  <p> </p>
  <div class="Participant">번역 : 구글번역기</div>
  <div class="Original_text" onclick="winopen('GameMaker_Language/GML_Overview/Language_Features/with.htm');">영문 페이지 보기</div>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">뒤로: <a href="../Language_Features.htm">언어 특징</a></div>
        <div style="float:right">다음: <a href="return.htm">반환</a></div>
      </div>
    </div>
    <h5>© 저작권 YoYo Games Ltd. 2020 판권 소유</h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->

</body></html> 