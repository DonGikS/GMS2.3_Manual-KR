<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "9.1.1_9";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Method Variables</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining the use of Method Variables"/>
  <meta name="rh-index-keywords" content="Method Variables"/>
  <meta name="search-keywords" content="Method Variables,methods,static,constructor,argument_count,method"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Method Variables">
        <span>메소드 변수</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>이 페이지를 전체 내용으로 보려면 여기를 클릭하십시오</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>메소드 변수</h1>
  <p>메소드 변수는 본질적으로 함수가 할당 된 변수로, 함수를 인스턴스에 &quot;바인딩&quot;하고 변수를 사용하여 함수를 참조 할 수있게합니다. <a href="Runtime_Functions.htm">런타임 함수 이름</a> 을 사용하여 빌드 된 <a href="Runtime_Functions.htm">함수</a> 를 참조하는 것처럼 -GML 기능. 사용되는 변수는 범위 내에서 <em>local</em> , <em>instance</em> 또는 <em>global</em> 일 수 있습니다 (변수 범위에 대한 자세한 내용은 <a href="Variables_And_Variable_Scope.htm">여기</a> 참조).</p>
  <p>메소드 변수 작성 구문은 다음과 같습니다.</p>
  <p class="code">&lt;variablename&gt; = function(&lt;parameter1&gt;, &lt;parameter2&gt;, etc... )<br/>     {<br/>     &lt;statement1&gt;;<br/>     &lt;statement1&gt;;<br/>     ...<br/>     }</p>
  <p>또는</p>
  <p class="code">function &lt;variablename&gt;(&lt;parameter1&gt;, &lt;parameter2&gt;, etc... )<br/>     {<br/>     &lt;statement1&gt;;<br/>     &lt;statement1&gt;;<br/>     ...<br/>     }</p>
  <p>그러나 일반적으로 두 번째 양식은 함수 이름에 스크립트 색인을 지정하고 첫 번째 양식은 &quot;true&quot;메소드이므로 메소드에 <em>첫 번째</em> 양식과 <a href="Script_Functions.htm">스크립트 함수</a> 를 정의하는 두 번째 양식을 사용합니다. 스크립트 기능을 정의하는 데 사용되는 경우 <a href="Variables/Global_Variables.htm">전역</a> 접두사를 사용해야합니다.</p>
  <p class="note"><strong>참고</strong> : 프로젝트에서 두 양식을 모두 사용한 다음 각 양식에서 런타임 함수 <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof ()</a> 를 호출하여이를 확인할 수 있습니다. 하나는 &quot;숫자&quot;로 분류되며, 스크립트 색인 ID를 반환하므로 다른 하나는 &quot;방법&quot;으로 분류됩니다.</p>
  <p>따라서 일반적으로 메소드와 메소드 변수에 대해 이야기 할 때 항상 스크립트 인덱스로 정의 <em>되지</em> 않은 함수를 참조한다는 점을 명심하십시오.</p>
  <p>아래는 다른 범위를 사용하여 메소드 변수를 작성하는 간단한 세 가지 예를 보여줍니다.</p>
  <p class="code">// Local<br/> var _debug = function(message)<br/>     {<br/>     show_debug_message(message);<br/>     }<br/>
    <br/> // Instance<br/> do_maths = function(val1, val2, val3)<br/>     {<br/>     return (val1 * val2) - val3;<br/>     }<br/>
    <br/> // Global<br/> global.pd = function(_x1, _y1, _x2, _y2);<br/>     {<br/>     return point_distance(_x1, _y1, _x2, _y2);<br/>     }</p>
  <p>위의 코드에서 함수에 대한 입력으로 제공되는 다양한 매개 변수는 모두 이름이 지정되며 이러한 이름은 함수 내에서 다른 입력을 참조하는 데 사용해야합니다. 또한 당신이 사용할 수 있습니다 <span class="inline"><a href="Language_Features/return.htm">반환</a></span> 코드의 다른 곳에서 사용하는 함수에서 값을 반환하는 문을, 그리고 <em>정의</em> 된 반환 값 함수 것을, <span class="inline">정의되지 않은</span> 뒤입니다 기본을 반환합니다.</p>
  <p class="note"><strong>참고</strong> : 변수가 선택한 범위에 있지만 실제 기능은 처음에 정의 된 범위에 바인딩됩니다. 예를 들어 <a href="Script_Functions.htm">스크립트 함수</a> 는 모두 전역 범위이고 &quot;언 바운드&quot;입니다 (예 : 인스턴스 내에서 메소드 변수로 다른 함수를 작성하는 스크립트 함수가있는 경우 인스턴스에서이 스크립트 함수를 호출하면 스크립트 내에서 사용되는 함수 <strong>가 메소드로 인스턴스 변수에 바인드됩니다</strong> . 일반적으로 이것은 당신이 생각할 필요가 없지만 메소드 변수를 사용하는보다 복잡한 작업에는 고려해야 할 가치가 있습니다. <a href="Language_Features/with.htm"><span class="inline">with와</span></a> 같은 다른 구문을 사용할 때도 적용됩니다. with 내부에 메서드 변수를 만들면 함수가 현재 범위에있는 인스턴스에 바인딩됩니다.</p>
  <p>생성 된 메서드 변수는 런타임 함수 또는 스크립트 함수와 마찬가지로 다음과 같이 사용할 수 있습니다.</p>
  <p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br/>     {<br/>     var _array;<br/>     _array[0] = point_distance(_x1, _y1, _x2, _y2);<br/>     _array[1] = point_direction(_x1, _y1, _x2, _y2);<br/>     return _array;<br/>     }<br/> vec = create_vec(x,
    y, mouse_x, mouse_y);</p>
  <p>함수 내에서 작성된 변수는 일반과 동일한 규칙을 따르며 사용 된 키워드 또는 함수 호출 범위에 따라 범위가 지정됩니다. 위의 예에서 <span class="inline">var</span> 를 사용하여 배열 변수가 함수의 <em>로컬</em> 범위에 있습니다. 키워드를 사용하지 않으면 함수를 호출 한 인스턴스 범위에서 변수가 생성 된 것입니다.</p>
  <p>메소드 변수 (및 스크립트 함수)는 가변 개수의 인수를 사용할 수 있으며 함수 매개 변수에 내장 <a href="Variables/Builtin_Global_Variables/argument.htm"><tt>argument [0 ... n]</tt></a> 배열을 사용할 수 있습니다. 그런 다음 내장 변수 <a href="Variables/Builtin_Global_Variables/argument_count.htm"><tt>argument_count</tt></a> 를 사용하여 이러한 추가 매개 변수를 확인할 수 있습니다. 예를 들면 다음과 같습니다.</p>
  <p class="code">/// @function                 create_random(object, layer);<br/> /// @param {int}    object    The object to create an instance of<br/> /// @param {int}    layer     OPTIONAL! The layer to create it on<br/> ///
    <br/> /// @description    Create an instance of the given object at a random position on the current layer or on the (optional) given layer<br/>
    <br/> function create_random(_obj)<br/>     {
    <br/>     var _layer = layer;<br/>     if argument_count &gt; 1<br/>         {
    <br/>         _layer = argument[1];<br/>         }
    <br/>     var _x = irandom(room_width);<br/>     var _y = irandom(room_height);<br/>     instance_create_layer(_x, _y, _layer, _obj);<br/>     }
  </p>
  <p class="note"><b>참고</b> : <tt>argument [n]</tt> 배열로 작업 할 때는 배열 <a href="Accessors.htm">접근 자</a> @를 사용할 수 없습니다.</p>
  <p>내장 <a href="Variables/Builtin_Global_Variables/argument.htm"><tt>인수 [n]</tt></a> 배열을 반드시 사용해야하는 것은 아니며, 함수에 제공되지 않은 인수 (함수가 지정된 인수가 있음)는 &quot; <a href="Data_Types.htm"><span class="inline">undefined</span></a> &quot;로 초기화 될 것입니다. 즉, <tt>argument_count</tt> 를 사용하여 위에서 언급 한 구조를 사용할 필요가 없으며 대신 다음과 같이 할 수 있습니다.</p>
  <p class="code">function my_func( _value)<br/>     {
    <br/>     _value = is_undefined(_value) ? 10 : _value;<br/>     return _value * 10;<br/>     }
  </p>
  <p>위의 코드를 사용하면 인수가 함수에 제공되지 않은 경우 매개 변수의 기본값을 지정할 수 있습니다.</p>
  <p class="note"><strong>참고</strong> : 위의 코드는 <strong>삼항 연산자를</strong> 사용하며 <a href="Language_Features/If_Else_and_Conditional_Operators.htm">여기</a> 에서 자세한 내용을 확인할 수 <a href="Language_Features/If_Else_and_Conditional_Operators.htm">있습니다</a> .</p>
  <p>메소드 변수 (및 스크립트 함수)의 흥미로운 특징은 <strong>정적 변수를</strong> 가질 수 있다는 것입니다. 정적 변수는 함수가 처음 호출 될 때 정의되고 그 이후로 값을 유지하는 변수입니다. 정적 변수를 만들려면이 간단한 예제와 같이 <span class="inline">static</span> 키워드를 사용하여 변수를 정의해야합니다.</p>
  <p class="code">counter = function()<br/>     {<br/>     static num = 0;<br/>     return num++;<br/>     }</p>
  <p>위의 예에서 변수 &quot; <span class="inline">num</span> &quot;은 정적 변수이므로 함수가 처음 호출 될 때 0으로 정의되지만 그 이후에 함수가 호출 될 때마다 변수 정의는 무시됩니다. 따라서이 함수를 다음과 같이 호출하면</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br/>     {<br/>     show_debug_message(counter());<br/>     }</p>
  <p>출력은 다음과 같습니다.</p>
  <p class="code">0<br/> 1
    <br/> 2
    <br/> 3
    <br/> 4
    <br/> 5
    <br/> 6
    <br/> 7
    <br/> 8
    <br/> 9
  </p>
  <p>여기서 <span class="inline">정적</span> 키워드를 사용하지 않으면 루프가 반복 될 때마다 출력이 단순히 0이됩니다. 변수 &quot; <span class="inline">num</span> &quot;은 반환되기 전에 함수가 호출 될 때마다 0으로 정의되기 때문입니다. 정적 변수는 원래 함수 내에서만 변경할 수 있으며, 외부에서는 로컬 인스턴스 변수 (함수 내에서 찾은 정적 사본)를 얻을 수 있습니다. 본질적으로 공유 정적 변수는 공유 사본 인 함수로만 변경할 수 있습니다 함수로만 쓸 수 있습니다.</p>
  <p>또한 메소드 (및 스크립트 함수) 내에서 <span class="inline">static</span> 키워드를 사용하여 변수와 마찬가지로 <strong>정적 함수</strong> 를 작성할 수 있습니다. 이는 변수를 사용할 때와 마찬가지로 메소드를 처음 사용할 때만 정의되는 함수임을 의미합니다. 예:</p>
  <p class="code">Vector2 = function( _x, _y ) constructor<br/>     {<br/>     x = _x;<br/>     y = _y;<br/>     static Add = function( _other )<br/>         {<br/>         x += _other.x;<br/>         y += _other.y;<br/>         }<br/>     }</p>
  <p>위의 예에서 함수 <span class="inline">Vector2</span> 를 사용하여 구조체를 만들 수 있으며 구조체에는 변수 변수가 있는데 그 중 하나는 메서드 변수 <span class="inline">Add</span> 입니다. 이 변수가 정적으로 정의되어 있기 때문에, 기능은 단지 <span class="inline">Vector2 기능은</span> 처음 <em>호출되면</em> 초기화 될 말하며,이 기능으로 생성 된 모든 상기 구조체 대신 창조의 초기 생성 기능 <span class="inline">추가를</span> 참조 할 것 각 구조체에 대한 새로운 기능 ( <span class="inline">구조</span> 및 <span class="inline">생성자</span> 키워드에 대한 자세한 내용은 <a href="Structs.htm">여기</a> 를 참조 <a href="Structs.htm">하십시오</a> ).</p>
  <p>아래에는 메소드 변수와 관련된 몇 가지 도우미 함수가 나열되어 있습니다.</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/is_method.htm">is_method</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method.htm">방법</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_self.htm">method_get_self</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_index.htm">method_get_index</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="Participant">번역 : 구글번역기</div>
  <div class="Original_text" onclick="winopen('GameMaker_Language\GML_Overview\Method_Variables.htm');">영문 페이지 보기</div>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">뒤로: <a href="GML_Overview.htm">GML 개요</a></div>
        <div style="float:right">다음: <a href="Structs.htm">구조</a></div>
      </div>
    </div>
    <h5>© 저작권 YoYo Games Ltd. 2020 판권 소유</h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->

</body></html> 